@model HardstyleFestivals.ViewModels.FestivalsListViewModel

@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">Hardstyle Festivals Knallen</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>


@if (Model.lstFestivals.Count() == 0)
{
    <p>no festivals in the DB</p>
}
else
{
    <ul>
        @foreach (var festival in Model.lstFestivals)
        {
            //make link to festivals/edit/id so we can edit this festival (if we want)
            <li>@Html.ActionLink(festival.Naam, "Edit", "Festivals", new { id = festival.Id }, null)</li>

        }
    </ul>
    
    
    <table id="Festivals" class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Festival</th>
                <th>ServiceProvider</th>
                <th>Delete</th>       
            </tr>
        </thead>
        <tbody>
            @foreach (var festival in Model.lstFestivals)
            {
                <tr>                    
                    <td>@Html.ActionLink(festival.Naam, "Edit", "Festivals", new { id = festival.Id }, null)</td>
                    <td>@festival.ServiceProvider.Naam </td>
                    <td><button data-festival-id ="@festival.Id" class="btn btn-link js-delete">delete</button></td>
                </tr>
            }


        </tbody>



    </table>
    @Html.ActionLink("Klik hier om een nieuw festival te maken", "New", "Festivals")
}

@section ViewSpecificScripts
{
    <script>
        $(document).ready(function () {

            //Koppel "datatables" functionaliteit aan de festivals tabel.
            //Wat er nu in feite gebeurt is dat de "datatables" library de gegevens uit de (op de server gemaakte) html gaat halen
            //en dan als raw data in zijn geheugen stopt, en daar gaat hij dan weer een "Datatables" tabel van maken.
            //Als je de server gelijk al raw data terug laat geven bespaar je de server werk en zal alles dus sneller gaan.
            //We hebben daarvoor onze festivals API beschikbaar. Kijk op de festivals/index view hoe we die gebruiken.
            $("#Festivals").DataTable();


            //in tabel Festivals voor alle "js-delete" elementen, maak een onclick funtie
            $("#Festivals .js-delete").on("click", function () {
                var buttonClicked = $(this);

                    //if (confirm("wil je festival deleten?")) {
                    //    $.ajax...                
                    //}
                    //nee, bootbox geeft een veel mooiere dialog window dus die gebruiken we:
                    bootbox.confirm("wil je festival deleten?", function (result) {
                        if (result)
                        {
                            //gebruik de API om het festival te deleten.
                            //Geef id mee, haal die op uit de zelfgemaakte attribute in de button
                            $.ajax({
                                url: "/api/festivals/" + buttonClicked.attr("data-festival-id"),
                                method: "DELETE",
                                succes: function () {
                                    conslole.log("knallen, het deleten is gelukt")
                                    //het record is uit de DB verwijderd, maar staat nog wel in de tabel
                                    //Verwijder de regel waari geklikt is uit de tabel (via de geklikte button):
                                    buttonClicked.parents("tr").remove();
                                }
                            });
                        }
                    })

            });
        });
    </script>

}